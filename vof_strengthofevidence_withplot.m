function vof_strengthofevidence_withplot(feFileToLoad, fibername, roisDir, roiNames, roiOperations, saveDir, nboots, nmontecarlo)

% Compute the Strength of Connection Evidence (S) for VOF. Creating plots
% describing the distribution of RMSE of model with and without VOF.
% Generating VOF fiber file (.pdb format).
%
% INPUT:
% feFileToLoad: a full path to .mat file containing fe structure (generated by LIFE code). Use strings for loading multiple connectome data.
% fibername: name for fiber groups. Used for file name of fiber file.
% roisDir: a directory containing waypoint ROI mat files
% roiNames: names for waypoint ROIs (string)
% roiOperations: default is {'and', 'and'} (segmenting fibers passing through both waypoint ROIs)
% saveDir:  a full path to a directory in which plot image files will be saved.
% nboots: number of bootstrap. Default is 100000.
% nmontecarlo: number of the repetition of montecarlo simulation. Default is 5.%
%
% EXAMPLE:
% feFileToLoad{1} = '/home/vof/data/S1/life/LH_1stconnectome_fe.mat';
% feFileToLoad{2} = '/home/vof/data/S1/life/LH_2ndconnectome_fe.mat';
% feFileToLoad{3} = '/home/vof/data/S1/life/LH_3rdconnectome_fe.mat';
% fibername = 'LVOF';
% roisDir = '/home/vof/data/S1/ROIs/Waypoint/'
% roiNames = {'LH_VOFPlane1.mat','LH_VOFPlane2.mat'};
% roiOperations = {'and','and'};
% saveDir = '/home/vof/data/S1/life/Picture/';
% vof_strengthofevidence_withplot(feFileToLoad, fibername, roisDir, roiNames, roiOperations, saveDir);
% 
% Copyright (C) Hiromasa Takemura and Franco Pestilli, 2013, Stanford VISTA team

% Argument checking
if notDefined('roiOperations')
    roiOperations = {'and','and'};
end
if notDefined('nboots')
    nboots = 100000;
end
if notDefined('nmontecarlo')
    nmontecarlo = 5;
end
sizecon = size(feFileToLoad);

for connum = 1:sizecon(2)
    
    % Define output file names
    fibernamenum = [fibername num2str(connum)];
    savefibersfile = [fibernamenum, '.pdb'] ;
    savematfile = [fibername ,'_stats.mat'];
    
    % Load rois
    for iroi = 1:length(roiNames)
        rois{iroi} = fullfile(roisDir,roiNames{iroi});
    end
    
    % Load fe structure
    disp('loading the LiFE structure...')
    if ischar(feFileToLoad{connum})
        fprintf('Loading %s ...\n',feFileToLoad{connum})
        load(feFileToLoad{connum});
    else
        fe  =feFileToLoad{connum};
        clear feFileToLoad;
    end
    
    % Extract the fiber group from the FE structure
    fg = feGet(fe,'fibers acpc');
    
    % Segment VOF from connectome
    fprintf('Segmenting the Tract from Connectome ...\n')
    [fgsegment, keepFascicles] = feSegmentFascicleFromConnectome(fg, rois, roiOperations, 'prob connectome');
    
    % Removing outliers from VOF fiber group
        fprintf('Excluding outliers from Fasciculus ...\n')
    [fgsegment2 keepFascicles2] = vof_gradient_removeoutlier(fe, keepFascicles,2,rois{1},rois{2});
    [fgsegment3, keepFascicle3] = mbaComputeFibersOutliers(fgsegment2,3,3,25);

    % Save VOF fibers in pdb file
    fgWrite(fgsegment3, savefibersfile);
    
    keepFascicles4 = keepFascicles2;
    keepFascicle2matrix = find(keepFascicles2);
    
    for kj = 1:length(keepFascicle3)
        if keepFascicle3(kj)==0,
            keepFascicles4(keepFascicle2matrix(kj)) = 0;
        else
        end
    end
    
    fprintf('Testing the Tract ...\n')
    [feWithoutFas, feWithFas, ~] = feTestFascicle(fe,keepFascicles4,0);
    
    % Compute the RMSE and Rrmse
    WITH.r2       = median(feGetRep(feWithFas,   'vox  r2'));
    WITH.rmse     = median(feGetRep(feWithFas,   'vox  rmse'));
    WITH.rrmse    = median(feGetRep(feWithFas,   'vox  rmse ratio'));
    WITH.rmseall  = (feGetRep(feWithFas,   'vox  rmse'));
    
    WITHOUT.r2       = median(feGetRep(feWithoutFas,'vox  r2'));
    WITHOUT.rmse     = median(feGetRep(feWithoutFas,'vox  rmse'));
    WITHOUT.rrmse    = median(feGetRep(feWithoutFas,'vox  rmse ratio'));
    WITHOUT.rmseall  = (feGetRep(feWithoutFas,'vox  rmse'));
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    % Empirical difference of RMSE between with and without VOF model
    EmpiricalDiff{connum} = WITHOUT.rmse - WITH.rmse;
    
    sizeWith    = length(WITH.rmseall);
    sizeWithout = length(WITHOUT.rmseall);
    
    nullDistributionP = nan(nboots,1);
    nullDistributionD = nan(nboots,1);
    
    % Set the parameter for distribution plot
    h1.xlim(1) = 35;
    h1.xlim(2) = 50;
    h1.ylim(1) = 0;
    h1.ylim(2) = 40;
    h1.xtick = [35 40 45 50];
    h1.ytick = [0 20 40];
    
    % Repeating the bootstrap method for several times
    for inm = 1:nmontecarlo
        fprintf('Bootstrap repetition %i/%i the Tract ...\n',inm,nmontecarlo)
        parfor ibt = 1:nboots
            nullDistributionP(ibt,inm) = mean(randsample(WITH.rmseall, sizeWith,true));
            nullDistributionD(ibt,inm) = mean(randsample(WITHOUT.rmseall, sizeWithout,true));
        end
        
        % Distribution With, tis distribution has the counts on the y axis and
        % the bis ion the xaxis
        [y(:,inm),xhis] = hist(nullDistributionP(:,inm),linspace(h1.xlim(1),h1.xlim(2),200));
        % Here we normalize the counts to proportion
        y(:,inm) = y(:,inm)./sum(y(:,inm)) * 100;
        
        % Distribution without
        [woy(:,inm),woxhis] = hist(nullDistributionD(:,inm),linspace(h1.xlim(1),h1.xlim(2),200));
        woy(:,inm) = woy(:,inm)./sum(woy(:,inm)) * 100;
    end
    
    y_m = mean(y,2);
    y_e = [y_m, y_m] + 2*[-std(y,[],2),std(y,[],2)];
    
    ywo_m = mean(woy,2);
    ywo_e = [ywo_m, ywo_m] + 2*[-std(woy,[],2),std(woy,[],2)];
    
    % Set colors for histograms
    histcolor = {[1 0 0],[0 0 1],[.45 .6 .35]};
        
    % Plot the null distribution and the empirical difference
    figName = sprintf(['Test_',fibernamenum, '_rmse_distribuion']);
    fh = mrvNewGraphWin(figName);
    patch([xhis,xhis],y_e(:),histcolor{1},'FaceColor',histcolor{1},'EdgeColor',histcolor{1}); % Distribution as the +/- 2SD
    hold on
    patch([woxhis,woxhis],ywo_e(:),histcolor{2},'FaceColor',histcolor{2},'EdgeColor',histcolor{2}); % Distribution as the +/- 2SD
    set(gca,'tickdir','out', ...
        'box','off', ...
        'ylim',h1.ylim, ...
        'xlim',h1.xlim, ...
        'ytick',h1.ytick, ...
        'xtick',h1.xtick, ...
        'fontsize',16)
    ylabel('Probability','fontsize',16)
    xlabel('Mean RMSE','fontsize',16')
    
    
    % Compute the Strength of the connection Evidence (S). S is defined as the
    % d'-prime between distribution of RMSE in with and without VOF model.
    
    % S in each montecarlo simulation
    dprime_all_voxels{connum} = diff([mean(nullDistributionP,1);mean(nullDistributionD,1)]) ...
        ./sqrt(sum([std(nullDistributionP,[],1);std(nullDistributionD,[],1)].^2,1));
    
    % S averaged across several montecarlo simulations
    dprime_all_mean{connum} = mean(dprime_all_voxels{connum});
    fprintf('The Strength of connection evidence is %i ...\n',dprime_all_mean{connum});
    
    % Save figure
    saveFig(fh,fullfile(saveDir,figName),'eps');    
    
    %% Make a scatter plot for describing RMSE histograms in WITH and WITHOUT VOF model
    figNameRmse =  sprintf(['Test_',fibernamenum, '_rmse_SCATTER']);
    fhRmseMap = mrvNewGraphWin(figNameRmse);

    % Set parameters for scatter plot
    fontSiz = 16;
    maxsca = 60;
    minsca = 30;
    
    % Computing histgrams of RMSE in both WITH and WITHOUT VOF model
    [ymap_pre,xx]  = hist3([WITHOUT.rmseall;WITH.rmseall]',{[(minsca-1):1:(maxsca+1)], [(minsca-1):1:(maxsca+1)]});
    [ymap_prep,x]  = hist3([WITHOUT.rmseall;WITH.rmseall]',{[minsca:1:maxsca], [minsca:1:maxsca]});
    
    ymap = ymap_pre(2:((maxsca-minsca)+2), 2:((maxsca-minsca)+2));
    
    sh = imagesc(flipud(log10(ymap)));
    cm = colormap(flipud(hot)); view(0,90);
    axis('square')
    set(gca, ...
        'xlim',[1 length(x{1})],...
        'ylim',[1 length(x{1})], ...
        'ytick',[1 (length(x{1})/2) length(x{1})], ...
        'xtick',[1 (length(x{1})/2) length(x{1})], ...
        'yticklabel',[x{1}(end) x{1}(round(end/2)) x{1}(1)], ...
        'xticklabel',[x{1}(1)   x{1}(round(end/2)) x{1}(end)], ...
        'tickdir','out','ticklen',[.025 .05],'box','off', ...
        'fontsize',fontSiz','visible','on')
    
    hold on
    plot3([1 length(x{1})],[length(x{1}) 1],[max(ymap(:)) max(ymap(:))],'k-','linewidth',1)
    ylabel('RMSE WITHOUT Fascicle','fontsize',fontSiz)
    xlabel('RMSE WITH Fascicle','fontsize',fontSiz)
    cb = colorbar;
    tck = get(cb,'ytick');

    set(cb,'yTick',[min(tck)  mean(tck) max(tck)], ...
        'yTickLabel',round(1*10.^[min(tck),...
        mean(tck), ...
        max(tck)])/1, ...
        'tickdir','out','ticklen',[.025 .05],'box','on', ...
        'fontsize',fontSiz','visible','on')
    
    % save figure
    saveFig(fhRmseMap,fullfile(saveDir,figNameRmse),'eps')
    
end
% save file
save(savematfile, 'dprime_all_mean','dprime_all_voxels','EmpiricalDiff');

end

function saveFig(h,figName,eps)
if ~exist( fileparts(figName), 'dir'), mkdir(fileparts(figName));end
fprintf('[%s] saving figure... \n%s\n',mfilename,figName);

if ~eps
    eval(sprintf('print(%s, ''-djpeg90'', ''-opengl'', ''%s'')', num2str(h),figName));
else
    eval(sprintf('print(%s, ''-cmyk'', ''-painters'',''-depsc2'',''-tiff'',''-r500'' , ''-noui'', ''%s'')', num2str(h),figName));
end

end